#!/usr/bin/python

import sys
import os
import sqlite3
import ConfigParser
from PyQt4 import QtGui, QtCore


class ClippyConfig():
    
    _instance = None
    _shared_state = {}
    _initialized = False

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super(ClippyConfig, cls).__new__(cls, *args, **kwargs)
        return cls._instance

    def __init__(self):
        self.__dict__ = self._shared_state

        if self._initialized:
            return
        self._initialized = True

        self._directory = os.path.expanduser(os.path.join("~", ".config", "clippy"))

        if not os.path.isdir(self._directory):
            os.mkdir(self._directory, 0755)
            
        self._config_parser = ConfigParser.SafeConfigParser()

        self['app.x'] = "200"
        self['app.y'] = "300"
        self['app.width'] = "300"
        self['app.height'] = "500"

        self._config_parser.read([
            os.path.join(self._directory, "clippy.ini"),
            ])

    def __getitem__(self, key):
        (section, key) = key.split('.', 1)
        #try:
        return self._config_parser.get(section, key)
        #except ConfigParser.Error:
        #    raise ConfigurationItemNotFoundError(section, key)

    def __setitem__(self, key, value):
        (section, key) = key.split('.', 1)

        if not self._config_parser.has_section(section):
            self._config_parser.add_section(section)

        self._config_parser.set(section, key, value)

    def save(self):
        f = open(os.path.join(self._directory, "clippy.ini"), 'w')
        self._config_parser.write(f)
        f.close()


class ClippyApplication(QtGui.QWidget):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)

        config = ClippyConfig()

        self.setGeometry(int(config['app.x']), int(config['app.y']), int(config['app.width']), int(config['app.height']))
        self.setWindowTitle('ClipPy')
        #self.setWindowIcon(QtGui.QIcon('icons/web.png'))

        #   buttons
        button_add = QtGui.QPushButton('&Add', self)
        layout_buttons = QtGui.QHBoxLayout()
        layout_buttons.addStretch(1)
        layout_buttons.addWidget(button_add)

        #   text boxes
        text_boxes = [QtGui.QTextEdit() for n in xrange(10)]
        layout_texts = QtGui.QVBoxLayout()
        layout_texts.setSpacing(10)
        for text_box in text_boxes:
            layout_texts.addWidget(text_box)

        #   main UI
        layout_parent = QtGui.QVBoxLayout()
        layout_parent.addLayout(layout_texts)
        layout_parent.addLayout(layout_buttons)
        self.setLayout(layout_parent)

        # events
        self.connect(button_add, QtCore.SIGNAL('clicked()'), QtGui.qApp, QtCore.SLOT('add_clip()'))

    def closeEvent(self, event):
        config = ClippyConfig()
        geom = self.geometry()

        config['app.x'] = str(geom.left())
        config['app.y'] = str(geom.top())
        config['app.width'] = str(geom.width())
        config['app.height'] = str(geom.height())

        config.save()
        event.accept()


app = QtGui.QApplication(sys.argv)
window = ClippyApplication()
window.show()

sys.exit(app.exec_())

